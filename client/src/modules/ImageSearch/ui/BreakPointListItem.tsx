import React, { Dispatch } from 'react';
import {
	ListItem,
	ListItemSecondaryAction,
	ListItemText,
	IconButton,
	AccordionSummary,
	AccordionDetails,
	TextField,
} from '@material-ui/core';
import { ArrowDropDownCircleOutlined } from '@material-ui/icons';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import Avatar from '@material-ui/core/Avatar';
import PhotoOutlinedIcon from '@material-ui/icons/PhotoOutlined';
import Accordion from '@material-ui/core/Accordion';
import { sizeFromBreakpoint } from '../useCases/createSrcset';
import { ChangeEventHandler } from 'react';
import {
	IBreakpointUI,
	TDialogActions,
	TUserBreakpointUI,
} from '../state/imageDialogState';
import AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';

const BreakPointListItem: React.FunctionComponent<
	IBreakpointUI & { dispatch: Dispatch<TDialogActions> }
> = (props) => {
	const { mediaWidth, slotUnit, slotWidth, queryType, editing, _id, origin } =
		props;
	const [isExpanded, setExpanded] = React.useState(false);

	// state to track user's edits
	const [bpState, setBPState] = React.useState<
		Omit<IBreakpointUI, '_id' | 'origin'>
	>({
		mediaWidth,
		slotUnit,
		slotWidth,
		queryType,
		validationErrs: [null, null, null, null],
		editing,
	});

	const primaryMessage =
		origin === 'new' ? 'Set a new query' : sizeFromBreakpoint(bpState);

	const handleChange =
		(key: string): ChangeEventHandler<HTMLInputElement> =>
		(e) => {
			setBPState({ ...bpState, [key]: e.target.value });
		};

	const toggleAccordion: React.MouseEventHandler = (e) => {
		e.stopPropagation();
		return origin === 'default' ? null : setExpanded(!isExpanded);
	};

	const manageAccordion = () => {
		return editing ? null : setExpanded(!isExpanded);
	};

	const handleSubmit = () => {
		setExpanded(false);
	};

	return (
		<ListItem
			data-testid={`breakpoint-item-${origin}`}
			disabled={origin === 'default' ? true : false}
			button
		>
			<Accordion expanded={isExpanded}>
				<AccordionSummary onClick={manageAccordion} aria-label="Expand">
					<ListItemAvatar>
						<Avatar>
							<AddCircleOutlineIcon />
						</Avatar>
					</ListItemAvatar>
					<ListItemText
						primary={primaryMessage}
						secondary={
							origin === 'default' ? 'Generated by default' : null
						}
					/>
					<ListItemSecondaryAction>
						<IconButton
							edge="end"
							aria-label="remove file"
						></IconButton>
					</ListItemSecondaryAction>
				</AccordionSummary>
				<AccordionDetails>
					{/* Careful here--need to be grabbing prop names from controlled component state, not
					from props of same name
					 */}
					<form onSubmit={handleSubmit}>
						<TextField
							value={bpState.queryType}
							onChange={handleChange('type')}
							select
							label="query type"
						>
							<option value="min">min-width</option>
							<option value="max">max-width</option>
						</TextField>
						<TextField
							value={bpState.mediaWidth}
							onChange={handleChange('mediaWidth')}
							inputProps={{
								inputMode: 'numeric',
								pattern: '[0-9]*',
							}}
							label="media width"
						>
							<option value="min">max-width</option>
							<option value="max">min-width</option>
						</TextField>
						<TextField
							value={bpState.slotWidth}
							onChange={handleChange('slotWidth')}
							inputProps={{
								inputMode: 'numeric',
								pattern: '[0-9]*',
							}}
							label="slot width"
						/>
						<TextField
							value={bpState.slotUnit}
							onChange={handleChange('slotUnit')}
							select
							label="slot unit"
						>
							<option value="vw">vw</option>
							<option value="px">px</option>
							<option value="em">em</option>
						</TextField>
						<IconButton type="submit">
							<ArrowDropDownCircleOutlined />
						</IconButton>
					</form>
				</AccordionDetails>
			</Accordion>
		</ListItem>
	);
};

export default BreakPointListItem;
