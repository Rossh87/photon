import { render, screen, act, getAllByLabelText } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import ImageDisplay from '../ui/ImageDisplay';
import { IDBUpload } from 'sharedTypes/Upload';
import { makeImageSearchProvider } from '../state/useImageSearchState';
import { IImageSearchState } from '../state/imageSearchStateTypes';
import { resetInternals } from 'react-use-fp';
import DependencyContext, {
	createDependenciesObject,
} from '../../../core/dependencyContext';
import { mockImage4, mockImage3, mockImageData } from './mockData';
import { ImageSearchStateContext } from '../state/useImageSearchState';
import ImageDialog from '../ui/ImageDialog';
import { createSrcset } from '../useCases/createSrcset';

const _mockState: IImageSearchState = {
	imageMetadata: mockImageData,
	currentlyActiveImages: [],
	error: null,
	imageUnderConfiguration: mockImage4,
};

let mockState: IImageSearchState;

beforeEach(() => {
	resetInternals();

	mockState = Object.assign({}, _mockState);
	mockState.imageUnderConfiguration = Object.assign({}, mockImage4);
});

const renderWithBreakpoints = () => render(
	<ImageSearchStateContext.Provider value={mockState}>
		<ImageDialog></ImageDialog>
	</ImageSearchStateContext.Provider>
);

describe('The ImageDialog component', () => {
	it('generates correct number of each kind of breakpoint child', async () => {
		// mockImage4 has 2 user-specified breakpoints
		renderWithBreakpoints();

		// check for UI to create a new breakpoint
		const createChild = await screen.findAllByText('create a new query', {
			exact: false,
		});
		expect(createChild.length).toBe(1);

		// check for UI from user-defined breakpoints.  It's important
		// that mock data not have user-defined BPs of same width as
		// an available size, to avoid testing conflicts
		const userBreakpoints = await screen.getAllByTestId(
			'breakpoint-item-user'
		);
		expect(userBreakpoints.length).toBe(2);

		// check for default breakpoints created from available widths.  Mockimage4 has 3.
		const defaults = screen.getAllByText('generated by default', {
			exact: false,
		});
		expect(defaults.length).toBe(3);
	});

	it('adds a new element to the list when adder is clicked', () => {
		// select an image under config that has no user-defined
		// breakpoints
		mockState.imageUnderConfiguration = mockImage3;
		render(
			<ImageSearchStateContext.Provider value={mockState}>
				<ImageDialog></ImageDialog>
			</ImageSearchStateContext.Provider>
		);

		const adder = screen.getByText('Create a new query');

		// make sure click is actually causing the desired effect
		const defaultBreakpoints = screen.getAllByText('max-width');
		const defaultCount = defaultBreakpoints.length;

		userEvent.click(adder);

		const withNew = screen.getAllByText('max-width');
		expect(withNew.length).toBe(defaultCount + 1);
	});

	it('can delete a breakpoint element from list', () => {
		renderWithBreakpoints()

		const breakpointItems = screen.getAllByRole('listitem');
		expect(breakpointItems.length).toBe(6);

		const deleteButtons = screen.getAllByRole('button', { name: 'Delete' });
		expect(deleteButtons.length).toBe(2);

		userEvent.click(deleteButtons[0]);

		expect(screen.getAllByRole('listitem').length).toBe(
			breakpointItems.length - 1
		);
	});

	it('updates the pasteable HTML offered to user when a BP is added/removed', () => {
		renderWithBreakpoints();

		const pasteableHTML = screen.getByTestId("pasteable-HTML-block").innerHTML
		const deleteButtons = screen.getAllByRole('button', { name: 'Delete' });

		)
	});
});
