import { render, screen, act, getAllByLabelText } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import ImageDisplay from '../ui/ImageDisplay';
import { IDBUpload } from 'sharedTypes/Upload';
import { makeImageSearchProvider } from '../state/useImageSearchState';
import { IImageSearchState } from '../state/imageSearchStateTypes';
import { resetInternals } from 'react-use-fp';
import DependencyContext, {
	createDependenciesObject,
} from '../../../core/dependencyContext';
import { mockImage4, mockImageData } from './mockData';
import { ImageSearchStateContext } from '../state/useImageSearchState';
import ImageDialog from '../ui/ImageDialog';

let mockImage: IDBUpload;

beforeEach(() => {
	resetInternals();
	mockImage = Object.assign({}, mockImage4);
});

const mockState: IImageSearchState = {
	imageMetadata: mockImageData,
	currentlyActiveImages: [],
	error: null,
	imageUnderConfiguration: mockImage4,
};

describe('The ImageDialog component', () => {
	it('generates correct number of each kind of breakpoint child', async () => {
		// mockImage4 has 2 user-specified breakpoints
		render(
			<ImageSearchStateContext.Provider value={mockState}>
				<ImageDialog></ImageDialog>
			</ImageSearchStateContext.Provider>
		);

		// check for UI to create a new breakpoint
		const createChild = await screen.findAllByText('create a new query', {
			exact: false,
		});
		expect(createChild.length).toBe(1);

		// check for UI from user-defined breakpoints.  It's important
		// that mock data not have user-defined BPs of same width as
		// an available size, to avoid testing conflicts
		const userBreakpoints = await screen.getAllByTestId(
			'breakpoint-item-user'
		);
		expect(userBreakpoints.length).toBe(2);

		// check for default breakpoints created from available widths.  Mockimage4 has 3.
		const defaults = screen.getAllByText('generated by default', {
			exact: false,
		});
		expect(defaults.length).toBe(3);
	});

	it('adds a new element to the list when adder is clicked', () => {
		render(
			<ImageSearchStateContext.Provider value={mockState}>
				<ImageDialog></ImageDialog>
			</ImageSearchStateContext.Provider>
		);

		const adder = screen.getByText('Create a new query');

		// make sure click is actually causing the desired effect
		const maybeNew = screen.getByTestId('breakpoint-item-new');
		expect(maybeNew).not.toBeInTheDocument();

		userEvent.click(adder);

		const definitelyNew = screen.getByTestId('breakpoint-item-new');
		expect(definitelyNew).toBeInTheDocument();
	});
});
