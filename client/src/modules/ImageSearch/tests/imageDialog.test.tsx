import { logRoles, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import { IImageSearchState } from '../state/imageSearchStateTypes';
import { resetInternals } from 'react-use-fp';
import { mockImage4, mockImage3, mockImageData } from './mockData';
import {
	renderDialogWithBreakpoints,
	renderDialogWithFullDeps,
} from './imageDisplayTestUtils';

const _mockState: IImageSearchState = {
	imageMetadata: mockImageData,
	currentlyActiveImages: [],
	error: null,
	imageUnderConfiguration: mockImage4,
};

let mockState: IImageSearchState;

beforeEach(() => {
	resetInternals();

	mockState = Object.assign({}, _mockState);
	mockState.imageUnderConfiguration = Object.assign({}, mockImage4);
});

describe('The ImageDialog component', () => {
	it('generates correct number of each kind of breakpoint child', async () => {
		const { openBreakpointsTab, getBreakpointCreationButton } =
			renderDialogWithBreakpoints(mockState);

		openBreakpointsTab();

		const userBreakpoints = await screen.getAllByRole('listitem');

		expect(userBreakpoints.length).toBe(5);

		// check for default breakpoints created from available widths.  Mockimage4 has 3.
		const defaults = screen.getAllByText('generated by default', {
			exact: false,
		});
		expect(defaults.length).toBe(3);
	});

	it('adds a new element to the list when adder is clicked', () => {
		mockState.imageUnderConfiguration = mockImage3;

		const { openBreakpointsTab, getBreakpointCreationButton } =
			renderDialogWithBreakpoints(mockState);

		openBreakpointsTab();

		const breakpoints = screen.getAllByRole('listitem');

		const prevLength = breakpoints.length;

		userEvent.click(getBreakpointCreationButton());

		const newLength = screen.getAllByRole('listitem').length;
		expect(newLength).toEqual(prevLength + 1);
	});

	it('can delete a breakpoint element from list', async () => {
		const { openBreakpointsTab } = renderDialogWithFullDeps(mockState, {});

		openBreakpointsTab();

		const beforeDeletionLength = screen.getAllByRole('listitem').length;

		const deleteButtons = screen.getAllByTestId('bp-delete');

		userEvent.click(deleteButtons[0]);

		const afterDeletionLength = screen.getAllByRole('listitem');

		expect(afterDeletionLength.length).toBe(beforeDeletionLength - 1);
	});

	it('updates the pasteable HTML offered to user when a BP is added/removed', () => {
		const { getGeneratedHTML, openBreakpointsTab } =
			renderDialogWithFullDeps(mockState, {});

		const beforeHTML = getGeneratedHTML();

		openBreakpointsTab();

		const deleteButtons = screen.getAllByTestId('bp-delete');

		userEvent.click(deleteButtons[0]);

		const afterHTML = getGeneratedHTML();

		expect(beforeHTML).not.toEqual(afterHTML);
	});
});
